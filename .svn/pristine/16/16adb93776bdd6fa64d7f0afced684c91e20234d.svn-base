{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Shogun in the JVM #\n",
    "\n",
    "In order to use Shogun in a JVM environment (Java, Scala, Groovy etc.) you need to have the following objects installed. Please note that the direcories can be different and depend on your environment.\n",
    "\n",
    "### Shogun Binaries\n",
    "The shogun binaries are found in the libshogun dynamic library:\n",
    "- (conda prefix)/lib/libshogun.so (linux Anaconda installation)\n",
    "- /usr/local/lib/libshogun.so (linux)\n",
    "- /usr/local/lib/libshogun.dylib (os x)\n",
    "\n",
    "### Shogun Swig Binaries (Java Language Bindings)\n",
    "The Shogun Java binaries are found in the ./cli/shogun/shogun dynamic library. Please note that this is different then the Shogun Binaries though the name is the same! The Shogun Swig Binaries are dependent on the Shogun Binaries\n",
    "\n",
    "It can be found in \n",
    "- (conda prefix)/lib/cli/shogun/libshogun.so (linux Anaconda installation)\n",
    "- /usr/lib/cli/shogun/libshogun.so (linux)\n",
    "- usr/local/lib/cli/shogun/libshogun.jnilib  (os x)\n",
    "\n",
    "### Shgun Jar\n",
    "The shogun.jar conains the Java JNI interface which refer to the 'Shogun Swig Binaries'.\n",
    "It can usually be found in the \n",
    "- /user/local/share/java/shogun.jar  (linux)\n",
    "- (conda prefix)/share/java/shogun.jar (linux)\n",
    "- /usr/local/share/java/shogun.jar (os x)\n",
    "\n",
    "\n",
    "### Library Paths\n",
    "When you run a java program, the system must be able to find the /cli/shogun/libshogun.so and the lib/libshogun.so. \n",
    "This is usually managed with the help of the java.library.path System parameter. If java.library.path is not defined the system uses the path defined in LD_LIBRARY_PATH (in linux) or DYLD_LIBRARY_PATH (in OS x).\n",
    "\n",
    "The Shogun Binaries are usually in the LD_LIBRARY_PATH. So the issue is usually to find the Shogun Swig Binaries (in /cli/shogun).\n",
    "\n",
    "The easiest way to deal with this, is usually not to mess around with the system settings but to load the librariy directly in the java code. You need to pass the absolute path to the library in the parameter:\n",
    "\n",
    "    System.load(\"/usr/lib/cli/shogun/libshogun.so\")\n",
    "    \n",
    "Of cause you need to make sure that that the library exists at the indicated place.\n",
    "\n",
    "### Installation ###\n",
    "\n",
    "We recommend to install shogun with all related dependencies with the help of Anaconda (see https://www.anaconda.com/download/#macos) with\n",
    "\n",
    "    conda install -c pschatzmann shogun-jvm \n",
    "\n",
    "(Alternativly you can build Shogun form the source as described in http://shogun-toolbox.org/install#manual.\n",
    "You need to set the flag '-DINTERFACE_JAVA=ON' !)\n",
    "\n",
    "### Maven ###\n",
    "\n",
    "The jars are available via Maven:\n",
    "\n",
    "\tRepository: http://software.pschatzmann.ch/repository/maven-public\n",
    "\tgroupId: \torg.shogun\n",
    "\tartifactId:\tshogun-jvm\n",
    "\tversion:\t0.0.1-SNAPSHOT\n",
    "    \n",
    "This also installs a the functionality to dynamically determine the load path and load the dynamic library with\n",
    "\n",
    "    ShogunNative.load()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Scala",
   "language": "scala",
   "name": "scala"
  },
  "language_info": {
   "codemirror_mode": "text/x-scala",
   "file_extension": ".scala",
   "mimetype": "",
   "name": "Scala",
   "nbconverter_exporter": "",
   "version": "2.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
