package org.shogun;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Stack;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

/**
 * Java Class to manage native libraries
 * 
 * @author pschatzmann
 *
 */
public class NativeLibraryLoader {
	private String name;
	private String version;
	private boolean forceCopy = false;
	private String platform = null;

	/**
	 * Defines the library. The name is used to identify the prefix of the resource
	 * directory name which contains the libraries
	 * 
	 * @param name
	 * @param version
	 */
	public NativeLibraryLoader(String name, String version) {
		// prefix for resource directory name
		this.name = name;
		// the version is used to make the copied artifact version dependent
		this.version = version == null ? "" : version;
	}
	
	public NativeLibraryLoader(String name, String version, String platform) {
		this(name,version);
		this.platform = platform;
	}


	/**
	 * Calls System.load() on all necessary libraries
	 * 
	 * @throws IOException
	 */
	public void load() throws IOException {
		DependencyTreeNode root = parse();
		for (DependencyTreeNode node : root.getTreeNodesPostOrder()) {
			String lib = node.getLibraryWithPath();
			try {
//				// load existing library
//				if (new File(lib).exists()) {
//					System.out.println("loading "+lib+" (exists)");
//					System.load(lib);
//					System.out.println(lib+" (exists)");
//				} else {
					loadFromJar(node.getLibraryName());
//				}
			} catch (Throwable ex) {
				loadFromJar(node.getLibraryName());
			}
		}
		System.out.println("The libraries have been loaded");
	}
	
	/**
	 * Parse into a Dependency Tree
	 * 
	 * @param lines
	 * @return
	 */
	public DependencyTreeNode parse() throws IOException {
		return parse(this.getLines());
	}

	
	/**
	 * Parse an array of string lines into a Dependency Tree
	 * 
	 * @param lines
	 * @return
	 */
	public DependencyTreeNode parse(String[] lines) {
		int lastLevel = -1;
		DependencyTreeNode root = new DependencyTreeNode("", "");
		Stack<DependencyTreeNode> stack = new Stack();
		stack.push(root);
		for (String line : lines) {
			if (isLineValid(line)) {
				String sa[] = line.split("=>");
				if (sa.length != 2) {
					throw new RuntimeException("Invalid line: " + line);
				}
				int level = getLevel(sa[0]);
				String name = sa[0].trim();
				String nameWithPath = sa[1].trim();
				DependencyTreeNode node = new DependencyTreeNode(name, nameWithPath);
				if (level > lastLevel) {
					stack.peek().addChild(node);
					stack.push(node);
				} else if (level < lastLevel) {
					stack.pop();
					stack.peek().addChild(node);
				} else {
					stack.peek().addChild(node);
				}

				lastLevel = level;
			}

		}
		return root;
	}
	

	/**
	 * Count the leading spaces.
	 * 
	 * @param string
	 * @return
	 */
	private int getLevel(String string) {
		int count = 0;
		for (char c : string.toCharArray()) {
			if (c != ' ') {
				break;
			}
			count++;
		}
		return count;
	}

	

	private boolean isLineValid(String line) {
		return !line.trim().startsWith("//") && !line.trim().isEmpty();
	}


	/**
	 * Loads a copy of the dynamic library which is stored in this jar
	 * 
	 * @param node
	 * @throws IOException
	 */
	public void loadFromJar(String libraryName) throws IOException {
		File file = this.getFile(libraryName);
		System.out.println("loading "+file.getAbsolutePath()+" (copy)");
		System.load(file.getAbsolutePath());
		System.out.println(file.getPath()+" (copy)");
	}

	/**
	 * Returns the library name w/o extension and prefix
	 * 
	 * @param resource
	 * @return
	 */
	protected String getLibraryName(String resource) {
		String result = resource;
		if (result.startsWith("lib")) {
			result = result.substring(3);
		}
		if (result.endsWith(".dylib")) {
			result = result.replace(".dylib", "");
		} else {
			result = result.replace(".so.", ".");
		}
		return result;
	}

	/**
	 * Returns the list of libraries which need to be loaded
	 * 
	 * @return
	 * @throws IOException
	 */
	public String[] getLines() throws IOException {
		String resourcePath = "/" + getPlatformSpecificName() + "/lddtree.txt";
		InputStream is = NativeLibraryLoader.class.getResourceAsStream(resourcePath);
		if (is == null) {
			throw new RuntimeException("Unsupported Platform: " + getPlatform());
		}
		String files = IOUtils.toString(is, "UTF8");
		return files.split("\\r?\\n");
	}

	/**
	 * Determines the file for the system library. We create the file from the
	 * resources if it does not exist
	 * 
	 * @param resource
	 * @return
	 * @throws IOException
	 */
	public File getFile(String resource) throws IOException {
		String resourcePath = "/" + getPlatformSpecificName() + "/" + resource;
		InputStream input = NativeLibraryLoader.class.getResourceAsStream(resourcePath.trim());
		if (input == null) {
			throw new RuntimeException("'" + resourcePath + "' not found");
		}
		File file = new File(getTarget(resource));
		if (this.isForceCopy() || !file.exists() || file.length() == 0) {
			FileUtils.copyInputStreamToFile(input, file);
		}

		if (file == null || !file.exists() || file.length() == 0) {
			throw new RuntimeException("Error: File " + file + " not found!");
		}
		return file;

	}

	/**
	 * Determines the location of the dynamic library. If the env variable
	 * DYNAMIC-DIRECTORY is not defined we use the tmpdir
	 * 
	 * @param resource
	 * @return
	 */
	protected String getTarget(String resource) {
		String target = System.getenv("DYNAMIC-DIRECTORY");
		if (target == null) {
			target = System.getProperty("java.io.tmpdir");
		}
		String result = target + version + "-" + resource;
		return result;
	}

	/**
	 * Concatenation of stem - OS - Architecture
	 * 
	 * @param stem
	 * @return
	 */
	public String getPlatformSpecificName() {
		return name + "-" + getPlatform();
	}

	/**
	 * Concatenation of OS - Architecture
	 * 
	 * @return
	 */
	public String getPlatform() {
		if (platform==null) {
			String arch = arch();
			String os = os();
			this.platform =  os + "-" + arch;
		}
		return this.platform;
	}

	/**
	 * Determines the architecture
	 * 
	 * @return
	 */
	protected String arch() {
		String arch = System.getProperty("os.arch", "").toLowerCase();
		if (arch.equals("amd64")) {
			arch = "x86_64";
		}
		return arch;
	}

	/**
	 * Determines the operation system
	 * 
	 * @return
	 */
	protected String os() {
		String os = System.getProperty("os.name", "").toLowerCase();
		if (os.startsWith("mac")) {
			os = "osx";
		}
		return os;
	}

	/**
	 * Determines if the dynamic library should be overwritten even if it already
	 * exists. Set to false to speed up the processing
	 * 
	 * @return
	 */
	public boolean isForceCopy() {
		return forceCopy;
	}

	/**
	 * Defines if the dynamic library should be overwritten even if it already
	 * exists. Set to false to speed up the processing
	 * 
	 * @param forceCopy
	 */
	public void setForceCopy(boolean forceCopy) {
		this.forceCopy = forceCopy;
	}

}
